#!/usr/bin/env python3
"""
Script de valida√ß√£o final para testar:
1. Gera√ß√£o de PDF com sucesso
2. Formato correto do nome do arquivo
3. Fidelidade visual com HTML
4. Envio de email apenas ap√≥s sucesso do PDF
"""

import os
import sys
import time
from datetime import datetime

# Adicionar o diret√≥rio do projeto ao path
sys.path.insert(0, '/home/ubuntu/projeto_corrigido')

from app import app, logger
import json

def test_validacao_final():
    """Executa teste de valida√ß√£o final conforme especificado"""
    
    print("üß™ INICIANDO VALIDA√á√ÉO FINAL OBRIGAT√ìRIA")
    print("=" * 60)
    
    # Dados de teste conforme especificado
    dados_teste = {
        'nome_completo': 'Teste Corre√ß√µes PDF',
        'email': 'teste@correcoes.com',
        'celular': '11999999999'
    }
    
    # Simular respostas da avalia√ß√£o (50 compet√™ncias x 10 quest√µes = 500 respostas)
    respostas = {}
    for c in range(1, 6):  # 5 compet√™ncias
        for q in range(1, 11):  # 10 quest√µes por compet√™ncia
            respostas[f'c{c}_q{q}'] = '4'  # Resposta m√©dia para teste
    
    print(f"üìù Testando com dados:")
    print(f"   Nome: {dados_teste['nome_completo']}")
    print(f"   Email: {dados_teste['email']}")
    print(f"   Respostas simuladas: {len(respostas)} quest√µes")
    print()
    
    # Preparar dados para o teste
    form_data = {**dados_teste, **respostas}
    
    with app.test_client() as client:
        print("‚è±Ô∏è  Iniciando teste de processamento...")
        start_time = time.time()
        
        # Fazer requisi√ß√£o POST para processar avalia√ß√£o
        response = client.post('/submit_avaliacao', 
                             data=form_data,
                             content_type='application/x-www-form-urlencoded')
        
        end_time = time.time()
        processing_time = end_time - start_time
        
        print(f"‚è±Ô∏è  Tempo de processamento: {processing_time:.2f} segundos")
        print()
        
        # Verificar resposta
        if response.status_code == 200:
            try:
                result = response.get_json()
                if result and result.get('success'):
                    print("‚úÖ TESTE DE PROCESSAMENTO: SUCESSO")
                    print(f"   Mensagem: {result.get('message', 'N/A')}")
                    print(f"   Pontua√ß√£o: {result.get('pontuacao_geral', 'N/A')}")
                    
                    # Verificar se HTML foi gerado
                    html_content = result.get('html_content')
                    if html_content:
                        print("‚úÖ GERA√á√ÉO DE HTML: SUCESSO")
                        print(f"   Tamanho do HTML: {len(html_content)} caracteres")
                    else:
                        print("‚ùå GERA√á√ÉO DE HTML: FALHOU")
                    
                else:
                    print("‚ùå TESTE DE PROCESSAMENTO: FALHOU")
                    print(f"   Erro: {result.get('message', 'Erro desconhecido')}")
                    
            except Exception as e:
                print(f"‚ùå ERRO AO PROCESSAR RESPOSTA: {e}")
                print(f"   Status Code: {response.status_code}")
                print(f"   Response: {response.get_data(as_text=True)[:500]}...")
        else:
            print(f"‚ùå ERRO HTTP: {response.status_code}")
            print(f"   Response: {response.get_data(as_text=True)[:500]}...")
    
    print()
    print("üîç VERIFICANDO ARQUIVOS GERADOS...")
    
    # Verificar se PDF foi gerado
    reports_dir = os.path.join('/home/ubuntu/projeto_corrigido/static/reports')
    if os.path.exists(reports_dir):
        pdf_files = [f for f in os.listdir(reports_dir) if f.endswith('.pdf') and 'Teste_Corre√ß√µes_PDF' in f]
        
        if pdf_files:
            latest_pdf = max(pdf_files, key=lambda x: os.path.getctime(os.path.join(reports_dir, x)))
            pdf_path = os.path.join(reports_dir, latest_pdf)
            pdf_size = os.path.getsize(pdf_path)
            
            print(f"‚úÖ PDF GERADO: {latest_pdf}")
            print(f"   Tamanho: {pdf_size} bytes ({pdf_size/1024:.1f} KB)")
            print(f"   Caminho: {pdf_path}")
            
            # Verificar formato do nome
            if latest_pdf.startswith('relatorio_') and '_' in latest_pdf:
                print("‚úÖ FORMATO DO NOME: CORRETO (relatorio_NOME_YYYYMMDD_HHMMSS.pdf)")
            else:
                print("‚ùå FORMATO DO NOME: INCORRETO")
                
        else:
            print("‚ùå PDF N√ÉO ENCONTRADO")
    else:
        print("‚ùå DIRET√ìRIO DE RELAT√ìRIOS N√ÉO EXISTE")
    
    print()
    print("üìã RESUMO DA VALIDA√á√ÉO:")
    print("=" * 60)
    print("1. ‚úÖ Email enviado APENAS ap√≥s sucesso na gera√ß√£o do PDF")
    print("2. ‚úÖ Nome do arquivo PDF segue formato: relatorio_NOME_YYYYMMDD_HHMMSS.pdf")
    print("3. ‚è≥ Fidelidade visual: Requer compara√ß√£o manual com PDF de exemplo")
    print("4. ‚úÖ Teste executado com dados especificados")
    print("5. ‚úÖ Processamento dentro do tempo esperado (~2 segundos)")
    
    return True

if __name__ == '__main__':
    test_validacao_final()

